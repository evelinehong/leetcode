#34
二分查找法。找到中间那个之后分别往左往右查找。和普通的二分查找一样。只是=的时候也要往左、往右移。最后left和right会分别是最左边和最右边的那个。
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0, right = n - 1;
        vector<int> answer = {-1,-1};
        int mid;
        while (left <= right) {
            mid = (left + right) / 2;
            if (target <= nums[mid]) right = mid - 1;
            else left = mid + 1;
        }
        answer[0] = left;
        left = 0; right = n - 1;
        while (left <= right) {
            mid = (left + right) / 2;
            if (target >= nums[mid]) left = mid + 1;
            else right = mid - 1;
        }
        answer[1] = right;
        if (answer[1] < answer[0]) return {-1, -1};
        return answer;
        } 
};

在边界的时候不用循环。直接判断和左右的大小比较。
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0, right = n - 1;
        vector<int> answer = {-1,-1};
        int mid;
        while (left <= right) {
            mid = (left + right) / 2;

            if (target == nums[mid]) {
                if ((mid > 0 && nums[mid] > nums[mid - 1])|| mid == 0) {
                    answer[0] = mid; break;
                }
                else right = mid - 1;
            }
            else if (target < nums[mid]) right = mid - 1;
            else left = mid + 1;
        }

        
        left = 0; right = n - 1;
        while (left <= right) {
            mid = (left + right) / 2;

            if (target == nums[mid]) {
                if ((mid < n - 1 && nums[mid] < nums[mid + 1])|| mid == n - 1) {
                    answer[1] = mid; break;
                }
                else left = mid + 1;
            }
            else if (target > nums[mid]) left = mid + 1;
            else right = mid - 1;
        }

        
        if (answer[1] < answer[0]) return {-1, -1};
        return answer;
        } 
};