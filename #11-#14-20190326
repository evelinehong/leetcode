#11
最开始想到的很简单
class Solution {
public:
    int maxarea, length, bottom, area = 0;
    int maxArea(vector<int>& height) {
       for (int i = 0; i < height.size(); i++)
       {
           for (int j = i; j < height.size(); j++){
               bottom = j - i;
               length = min (height[i], height[j]);
               area = bottom * length;
               if (area > maxarea) maxarea = area;
           }
       }
        return maxarea;
    }
};
为什么不从长的往短的缩呢？然后再把ai和原来的length比较，如果更短就不更新i,j值了。
static int x = [](){ios::sync_with_stdio(false); cin.tie(nullptr); return 0; }();

class Solution {
public:
    int maxarea, length, bottom, area = 0;
    int maxArea(vector<int>& height) {
        int i = 0, j = height.size() - 1;
       while (i < j)
       {   bottom = j - i;
           length = min (height[i], height[j]);
           area = bottom * length;
           if (area > maxarea) maxarea = area;
           if (height[i] <= length) i++;
           if (height[j] <= length) j--;
       }
        return maxarea;
    }
};

#12
主要是弄一个字典，一一对应
但其实因为我们是按顺序比较大小的，所以不用弄unordered_map，直接两个数组当作字典顺序查找就行了。
static int x = [](){ios::sync_with_stdio(false); cin.tie(nullptr); return 0; }();

class Solution {
public:
    string intToRoman(int num) {
        string output = "";
        string symbol[] = {"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};
        int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
            for (int i = 0; num != 0; i++){
                while (num >= value[i]){
                    num -= value[i];
                    output += symbol[i];
                }
            }
        return output;
    }
};

#13
一个trick就是从后往前，如果比较大就+，比较小就-
和上题一样都是要弄一个字典，但是不用顺序比较大小，而是直接看字符对应的数字，所以直接弄一个字典比较方便
注意字符用单引号不用双引号
static int x = [](){ios::sync_with_stdio(false); cin.tie(nullptr); return 0; }();

class Solution {
public:
    int romanToInt(string s)  {
        unordered_map <char, int> T =  { {'I', 1}, 
            {'V', 5}, 
            {'X', 10}, 
            {'L', 50}, 
            {'C', 100}, 
            {'D', 500}, 
            {'M', 1000} };
        int sum = T[s.back()];
            for (int i = s.length() - 2; i >= 0; i--){
                if (T[s[i]] < T[s[i+1]]) sum -= T[s[i]];
                else sum += T[s[i]];
            }
        return sum;
    }
};

#14 很容易啊，原来以为是最长子序列还研究了好几天动态规划。。。
static int x = [](){ios::sync_with_stdio(false); cin.tie(nullptr); return 0; }();

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        string prefix = "";
        if (strs.size() == 0) return prefix;
        for (int idx = 0; idx < strs[0].size(); idx++){
            for (int i = 0; i < strs.size(); i++){
                if ((idx == strs[i].size()) || (strs[i][idx] != strs[0][idx]))
                    return prefix;
            }
            prefix += strs[0][idx];
        }
        return prefix;
    }
};

0ms哈哈哈

